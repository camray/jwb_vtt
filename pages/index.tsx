import type { NextPage } from 'next'
import { useState, useCallback } from 'react';
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

const Home: NextPage = () => {
  const [docId, setDocId] = useState('');
  const [extractedText, setExtractedText] = useState('');
  const [videoTitle, setVideoTitle] = useState('');
  const [error, setError] = useState('');
  const submit = useCallback(async () => {
    setError('');
    setExtractedText('');
    setVideoTitle('');
    if (!docId) {
      setError('No DocId specified')
      return;
    }
    
    let response: Response;
    let json: any;

    try {
      response = await fetch(`https://b.jw-cdn.org/apis/mediator/v1/media-items/E/${docId}?clientType=www`);
      json = await response.json();
    } catch (e) {
      setError(`${e}`);
      return;
    }

    if(json.media.length < 1) {
      setError ('No media found with specified DocId');
      return;
    }

    const media = json.media[0];
    const subtitledFile = media.files.find((f: any) => f.subtitles !== undefined);
    if (!subtitledFile) {
      setError('Could not find any subtitles for specified media');
      return;
    }
    setVideoTitle(media.title);

    const vtt = subtitledFile.subtitles.url;
    let r: Response;
    let x: string;
    try {
      r = await fetch(vtt);
      x = await r.text();
    } catch (e) {
      setError(`${e}`);
      return;
    }

    const text = x.split('\r\n').filter(x => x && x.indexOf('-->') === -1).join(' ').split('. ').join('. \n').split('WEBVTT ')[1];
    setExtractedText(text);
  }, [docId]);

  return (
    <div className={styles.container}>
      <Head>
        <title>JWB VTT Downloader</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          JWB VTT Extractor
        </h1>

        <div>
          <input type="text" value={docId} onChange={e => setDocId(e.target.value)} placeholder="DocID" />
          <button onClick={submit}>Submit</button>
        </div>
        {error && (
          <div>
            {error}
          </div>
        )}
        {extractedText && (
          <div className={styles['text-area-container']}>
            {videoTitle && <h3>{videoTitle}</h3>}
            <textarea className={styles['text-area']} value={extractedText} readOnly />
          </div>
        )}
      </main>
    </div>
  )
}

export default Home
